{"version":3,"sources":["src/storage.ts","App.tsx","index.js"],"names":["storage","MMKV","load_relay_ips","result","getString","split","save_relay_ips","relays","length","set","join","delete","axios","require","default","details","styles","StyleSheet","create","relayBox","display","container","flex","backgroundColor","alignItems","color","justifyContent","text","fontWeight","hostName","cpuTemp","ip","loadAvg","ram","uptime","input","width","borderRadius","padding","height","relayButton","title","fontSize","button","paddingVertical","paddingHorizontal","elevation","registerRootComponent","server","get","then","response","data","i","r","push","Text","style","host_name","cpu_temp","toFixed","load_avg","memory_used","memory_total","React","useState","onChangeText","relay","RelayUpdate","updateState","forceUpdate","useCallback","final","Pressable","onPress","a","async","filter","c","toString","View","className","TextInput","placeholder","value","includes","updated","StatusBar"],"mappings":"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","file":"static/js/app.84c5e8ad.chunk.js","sourcesContent":["import { MMKV } from 'react-native-mmkv'\n\nexport const storage = new MMKV()\n\nexport const load_relay_ips = () => {\n    const result = storage.getString(\"relays\")?.split(\"|\");\n    if (!result) {\n        return [];\n    }\n    return result;\n};\n\nexport const save_relay_ips = (relays: String[]) => {\n    if (relays.length == 0) {\n        storage.delete(\"relays\");\n        return;\n    } \n    storage.set(\"relays\", relays.join(\"|\"));\n};","import { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, Text, View, TextInput, Pressable } from 'react-native';\nimport { load_relay_ips, save_relay_ips } from './src/storage';\nimport React from 'react';\nconst axios = require('axios').default;\nlet details: any = [];\n\nexport default function App() {\n  for (const server of load_relay_ips()) {\n    axios.get(\"http://\" + server)\n      .then((response: { data: any }) => {\n        if (!response.data) {\n          return;\n        }\n        details = [];\n        for (let i = 0; i < response.data.length; i ++) {\n          const r = response.data[i];\n          details.push(<div key={r.host_name + \"|\" + r.ip}>\n            <br />\n            <br />\n            <Text style={styles.hostName}>host: {r.host_name}  </Text> <br />\n            <Text style={styles.cpuTemp}>cpu temp {r.cpu_temp ? r.cpu_temp.toFixed(1) : 0}Â°C </Text> <br />\n            <Text style={styles.ip}>ip: {r.ip} </Text> <br />\n            <Text style={styles.loadAvg}>load avg: {r.load_avg.join(\" \")} </Text> <br />\n            <Text style={styles.ram}>ram: {((r.memory_used / r.memory_total) * 100).toFixed(2)}% </Text> <br />\n            <Text style={styles.uptime}>uptime: {(r.uptime / 3600).toFixed(1)} hrs </Text> <br />\n          </div>)\n        }\n      })\n  }\n  const [text, onChangeText] = React.useState(\"\");\n  let [relay, RelayUpdate] = React.useState(load_relay_ips());\n  const [, updateState] = React.useState();\n  // @ts-expect-error\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  let final = [];\n  for (const ip of load_relay_ips()) {\n    final.push(<div key={ip.toString()}>\n      <Pressable\n        onPress={async () => {\n          let relay = load_relay_ips();\n          relay = relay.filter((c: any) => c != ip && c != \"\");\n          save_relay_ips(relay);\n        }}\n      >\n        <Text style={styles.relayButton}>{ip}</Text>\n      </Pressable>\n    </div>);\n  }\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Server Status</Text>\n      <div className=\"styles.relayBox\">\n        <TextInput\n          style={styles.input}\n          onChangeText={onChangeText}\n          placeholder={\"add relay\"}\n          value={text}\n        />\n        <Pressable\n          style={styles.button}\n          onPress={() => {\n            if (!relay.includes(text)) {\n              if (text && text.length > 1) {\n                let updated = relay;\n                updated.push(text);\n                RelayUpdate(updated);\n                onChangeText(text);\n                save_relay_ips(relay);\n              }\n            }\n            onChangeText(\"\");\n            forceUpdate();\n          }}\n        >\n          <Text style={styles.relayButton}>add/refresh</Text>\n        </Pressable>\n      </div>\n      <Text>{final}</Text>\n      <Text style={styles.text}>{details}</Text>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  relayBox: {\n    display: 'flex',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: '#282828',\n    alignItems: 'center',\n    color: '#fff',\n    justifyContent: 'center',\n  },\n  text: {\n    color: '#fff',\n    fontWeight: 'bold',\n  },\n  hostName: {\n    color: '#7eb0a4',\n    fontWeight: 'bold',\n  },\n  cpuTemp: {\n    color: '#d3869b',\n  },\n  ip: {\n    color: '#e98b4d',\n  },\n  loadAvg: {\n    color: '#d76b68',\n  },\n  ram: {\n    color: '#8ec07c',\n  },\n  uptime: {\n    color: '#c69e6d',\n  },\n  input: {\n    width: '15em',\n    borderRadius: 3,\n    padding: 5,\n    color: '#fff',\n    backgroundColor: '#474747',\n    height: 40,\n  },\n  relayButton: {\n    color: '#d5bf98',\n    padding: 2,\n  },\n  title: {\n    color: '#ec6863',\n    fontSize: 40,\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 12,\n    paddingHorizontal: 32,\n    borderRadius: 4,\n    elevation: 3,\n    backgroundColor: '#665c53',\n  },\n});","import { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in Expo Go or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}